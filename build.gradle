buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		maven { url = 'https://maven.minecraftforge.net' }
		maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
	}
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

configurations {
	embed
	implementation.extendsFrom(embed)
	clientAnnotationProcessor
}

minecraft {
	mappings channel: 'stable', version: '39-1.12'

	runs {
		client {
			workingDirectory project.file('run')
			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'
			args += ['--tweakClass', 'org.spongepowered.asm.launch.MixinTweaker',
					'--mixin', 'mixins.liteloader.core.json',
					'--mixin', 'mixins.liteloader.client.json']

			mods {
				sanctum {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')
			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'
			args += ['--tweakClass', 'org.spongepowered.asm.launch.MixinTweaker',
					'--mixin', 'mixins.liteloader.core.json',
					'nogui']

			mods {
				sanctum {
					source sourceSets.main
				}
			}
		}
	}
}

ext {
	def isJenkins = project.hasProperty("jenkins")

	buildVersion = project.hasProperty("buildVersion") ? buildVersion : '0.0'
	isReleaseBuild = true
	brand = isJenkins ? "${project.mcVersion}-SNAPSHOT-r${System.env.GIT_COMMIT.take(7).toUpperCase()}-b${System.env.BUILD_NUMBER}-${System.env.BUILD_ID}" : ""

	projectName = 'LiteLoader'
	inceptionYear = '2012'
	packaging = 'jar'

	startClass = 'com.mumfrey.liteloader.debug.Start'
	tweakClass = 'com.mumfrey.liteloader.launch.LiteLoaderTweaker'
}

group = "com.mumfrey"
archivesBaseName = "liteloader"
version = buildVersion

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
	mavenCentral()
	mavenLocal()
	maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
	maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
	flatDir { dirs 'lib' }
}

dependencies {
	minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2855'
	implementation fileTree(include: ['*.jar'], excludes: ['*-sources.jar'], dir: 'lib')

	implementation('org.spongepowered:mixin:0.8.3-SNAPSHOT') {
		exclude module: 'asm-commons'
		exclude module: 'asm-tree'
		exclude module: 'launchwrapper'
		exclude module: 'guava'
		exclude module: 'log4j-core'
	}

	annotationProcessor 'org.spongepowered:mixin:0.8.3-SNAPSHOT:processor'
	clientAnnotationProcessor 'org.spongepowered:mixin:0.8.3-SNAPSHOT:processor'
}

sourceSets {
	main {
		ext.refMap = "mixins.liteloader.core.refmap.json"
	}
	client {
		compileClasspath += main.compileClasspath + main.output
		ext.refMap = "mixins.liteloader.client.refmap.json"
	}
	debug {
		compileClasspath += client.compileClasspath + client.output
	}
}

mixin {
	add sourceSets.main, 'mixins.liteloader.core.refmap.json'
	add sourceSets.client, 'mixins.liteloader.client.refmap.json'

	config 'mixins.liteloader.core.json'
	config 'mixins.liteloader.client.json'
}

compileClientJava {
	options.annotationProcessorPath = configurations.clientAnnotationProcessor
}

sourceSets.main.resources { srcDir 'src/generated/resources' }
sourceSets.client.resources { srcDir 'src/generated/resources' }

afterEvaluate {
	logger.lifecycle '================================================='
	logger.lifecycle '  LiteLoader'
	logger.lifecycle '  Copyright (C) 2011-2017 Adam Mummery-Smith'
	logger.lifecycle '  Running in {} mode', (project.isReleaseBuild ? "RELEASE" : "SNAPSHOT")
	logger.lifecycle '================================================='
}

processResources {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	inputs.property "brand", project.brand
	from (sourceSets.main.resources.srcDirs) {
		include 'liteloader.properties'
		filter { line -> line.startsWith('brand=') ? line + project.brand : line }
	}
}

// manifest entries for all jars
def jarManifest = {
	attributes (
		'Built-By': System.properties['user.name'],
		'Created-By': System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
		'Implementation-Title': name,
		'Implementation-Version': version,
		'Implementation-Vendor': url,
		'TweakClass': tweakClass
	)
}

jar {
	doFirst {
		ant.replace(
			file: file("${compileJava.temporaryDir}/${sourceSets.main.refMap}"),
			token: "func_72355_a(Lnet/minecraft/network/NetworkManager;Lnet/minecraft/entity/player/EntityPlayerMP;)V",
			value: "initializeConnectionToPlayer(Lnet/minecraft/network/NetworkManager;Lnet/minecraft/entity/player/EntityPlayerMP;Lnet/minecraft/network/NetHandlerPlayServer;)V"
		)
	}
	from sourceSets.client.output
	from sourceSets.debug.output
	manifest jarManifest
}

tasks.register('releaseJar', Jar) {
	from sourceSets.main.output
	from sourceSets.client.output

	manifest jarManifest
	classifier = 'staging'
}

tasks.register('javadocJar', Jar) {
	dependsOn javadoc
	from javadoc.destinationDir
	classifier = 'javadoc'
}

tasks.withType(JavaCompile) {
	options.compilerArgs += [
		'-Xlint:all',
		'-Xlint:-path',
		'-Xlint:-rawtypes',
		'-Xlint:-processing'
	]
	options.deprecation = true
	options.encoding = 'utf8'
}

if (JavaVersion.current().isJava8Compatible()) {
	tasks.withType(Javadoc) {
		// disable the crazy super-strict doclint tool in Java 8
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}

artifacts {
	archives jar
	archives javadocJar
}
